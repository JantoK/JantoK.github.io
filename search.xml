<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>如何将现有Vue项目迁移到Nuxt框架下</title>
      <link href="/2020/07/06/%E5%A6%82%E4%BD%95%E5%B0%86%E7%8E%B0%E6%9C%89Vue%E9%A1%B9%E7%9B%AE%E8%BF%81%E7%A7%BB%E5%88%B0Nuxt%E6%A1%86%E6%9E%B6%E4%B8%8B/"/>
      <url>/2020/07/06/%E5%A6%82%E4%BD%95%E5%B0%86%E7%8E%B0%E6%9C%89Vue%E9%A1%B9%E7%9B%AE%E8%BF%81%E7%A7%BB%E5%88%B0Nuxt%E6%A1%86%E6%9E%B6%E4%B8%8B/</url>
      
        <content type="html"><![CDATA[<p>本篇会介绍如何将现有Vue项目，迁移到Nuxt框架下。</p><p>公司前阵子为了给现有项目做seo，同时对缓存以及pwa、添加一些服务端功能等功能需求进行一定的优化和管理，于是决定将一个现有的纯vue项目，迁移到<a href="https://www.nuxtjs.cn/" target="_blank" rel="noopener">nuxt</a>框架下。本篇重点写的是是在当时做迁移的时候记录的一些坑，而具体的一些步骤其实网上都有很详细的描述，我就不再做论述。</p><a id="more"></a><p>学习本篇前，你必须具备以下知识储备：</p><ul><li>熟悉Vue项目。</li><li>对Nuxt项目有一定的初步了解。</li><li>有自己查阅文档的能力。</li></ul><hr><p>对于项目的基础迁移步骤，可以参考<a href="https://segmentfault.com/a/1190000019909396?utm_source=tag-newest" target="_blank" rel="noopener">这篇文章</a>，里面都有非常详细的记载，但也是仅供参考，因为不同的项目也是有一定的区别。</p><p>翻阅了一下之前在做迁移的时候所记录的文档，总结下几个大坑，如果里面有你所遇到的，希望能帮到你。</p><ul><li>如何将vue-router适配到nuxt的路由管理中？</li><li>如何适配并封装axios？</li><li>如何将vue.config.js适配到nuxt.config.js中？</li><li>全局型plugins该如何引入？</li></ul><hr><h2 id="你必须先知道的一些坑"><a href="#你必须先知道的一些坑" class="headerlink" title="你必须先知道的一些坑"></a>你必须先知道的一些坑</h2><p>在迁移的时候，有遇到一些大坑，翻阅文档，结合stackoverflow才摸透。因为国内环境中使用nuxt的人并不多，生态还不是很完善，所以踩到一些坑的时候并不是能很快排查解决。</p><p>这里先提出几个你必须要知道的几个坑，后面的文章里也是默认你已经熟知这几点。（<strong>其实我感觉整篇文章最精华的就是这里了</strong>）</p><h3 id="什么是nuxt"><a href="#什么是nuxt" class="headerlink" title="什么是nuxt"></a>什么是nuxt</h3><p>对于nuxt，官方是这么介绍的：</p><blockquote><p>Nuxt.js 是一个基于 Vue.js 的<strong>通用应用框架</strong>。</p></blockquote><p>他集成了vue，vue-router，vuex等等一些较为基础和重要的组件/框架。</p><p>（也是因为集成的原因，所以无法从cdn引入vue，因为框架内已集成，再从cdn引入会<strong>重复打包</strong>，目前还没有找到相关解决办法）</p><h3 id="spa与ssr"><a href="#spa与ssr" class="headerlink" title="spa与ssr"></a>spa与ssr</h3><p>关于什么是spa与ssr，网上的资料已经非常全面了。这里说一下会踩到的坑。在ssr模式下，nuxt会先进行服务端的解析，再进行客户端的解析。于是乎在运行的时候，就会触发一些变量、组件等undefined的情况。</p><p>这里以最典型的window对象为例，在项目中如果要使用window对象，并且还是在客户端解析前（如created生命周期内），就会触发undefind的问题。</p><p>解决办法是，更换为在服务端解析后的生命周期（如mouted生命周期）内执行，或者是加入以下代码进行判断：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (process.browser) &#123;</span><br><span class="line">      ........</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>在迁移的过程中你会遇到非常非常多次这个问题，而解决办法就是如此的简单，仅需一行代码。</p><h3 id="万物都是plugins"><a href="#万物都是plugins" class="headerlink" title="万物都是plugins"></a>万物都是plugins</h3><p>在nuxt下，许许多多的组件以及配置，都是通过plugins的形式完成配置。这里也会涉及到axios、localstorage等的封装。</p><p>而在plugins进行引入的时候，也要注意下是否开启ssr。</p><h2 id="将vue-router迁移到nuxt的路由管理中"><a href="#将vue-router迁移到nuxt的路由管理中" class="headerlink" title="将vue-router迁移到nuxt的路由管理中"></a>将vue-router迁移到nuxt的路由管理中</h2><p>在nuxt与vue中，有一个最为明显的区别就是nuxt采用的是根据pages页面的路径自动生成所对应的路由。所以在项目的迁移中，这里也是花费时间最多的模块。</p><p>迁移方案有两种：</p><ol><li>沿用旧的vue-router结构，使用官方提供的的<a href="https://github.com/nuxt-community/router-module" target="_blank" rel="noopener">@nuxtjs/router</a>插件，以读取沿用旧的router.js文件配置。同时修改srcDir路径（这个配置在文章开头推荐文章中已经有很详细的记录了）。</li><li>一点一点pages文件中，进行适配。</li></ol><p>未完待续。</p>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> nuxt </tag>
            
            <tag> vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>手把手教你Hexo网站添加主题及个性化配置</title>
      <link href="/2020/07/05/Hexo%E7%BD%91%E7%AB%99%E6%B7%BB%E5%8A%A0%E4%B8%BB%E9%A2%98%E5%8F%8A%E4%B8%AA%E6%80%A7%E5%8C%96%E9%85%8D%E7%BD%AE/"/>
      <url>/2020/07/05/Hexo%E7%BD%91%E7%AB%99%E6%B7%BB%E5%8A%A0%E4%B8%BB%E9%A2%98%E5%8F%8A%E4%B8%AA%E6%80%A7%E5%8C%96%E9%85%8D%E7%BD%AE/</url>
      
        <content type="html"><![CDATA[<p>本篇会介绍如何使用Hexo主题，并且进行个性化配置。</p><!-- about --><p>学习本篇前，你必须具备以下知识储备：</p><ul><li>已经安装且运行了Hexo。</li><li>对前端知识有初步的基础认识。</li><li>有自己查阅文档的能力。</li></ul><p>如果有以下知识储备，那就更好了：</p><ul><li>能编写css样式。</li></ul><h2 id="怎么使用Hexo主题"><a href="#怎么使用Hexo主题" class="headerlink" title="怎么使用Hexo主题"></a>怎么使用Hexo主题</h2><p>  在 <a href="http://129.211.78.206/2020/07/04/Hexo%E7%BD%91%E7%AB%99%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA%E4%B8%8E%E5%9F%BA%E7%A1%80%E9%85%8D%E7%BD%AE/">上篇教程</a> 中我们的Hexo博客已经可以跑起来了。但是默认的主题实在是很丑一点都不狂拽酷炫。<br>  而我们搭建一个属于自己的狂拽酷炫的博客的博客的第一步，就是先在<a href="https://hexo.io/themes/" target="_blank" rel="noopener">Hexo官网</a>上挑选一个最接近适合我们博客的主题。<br>  挑选到自己喜欢的主题后，接下来就是<strong>考验你眼力</strong>的适合了。因为我们要在展示的示例网站中，找到这个主题的项目名字、或者是地址。<br>  作者放出来的该主题的示例网站，他可能是一个作者正在使用的个人站、也有可能是一个展示站（即样式展示而已）。也有可能是很规范的示例网站（即包含示例、教程、文档，同时单独挂载出来）。<br>  这里我们以本站所使用的<a href="https://volantis.js.org/" target="_blank" rel="noopener">volantis主题</a>为例子。进去之后就是非常完整的主题默认样式展示，同时是有版本更新内容以及文档教程等。</p><p>  我们在主题网站的教程页面里，找到了如下安装命令：<br>  <img src="https://jantok-1302532854.cos.ap-shanghai.myqcloud.com/img/hexo/post/2020-07-05-02.png" alt="安装命令"><br>  我们一步一步来解释以下这几步命令的含义，同时对于其他主题的安装也是大同小异，举一反三即可。<br></p><ol><li><p>Hexo中所有的主题都是下载到themes文件夹下进行统一管理。</p></li><li><p>而下载的git命令如上图所示，首先你要在命令行状态下进入到你的博客文件夹，然后使用下载命令进行主题下载。</p></li><li><p>而其他地址也一样，你所需要做的就是找到你想要的主题的地址，然后clone到themes下。</p></li><li><p>博客根目录下的_config.yml是整个博客项目的配置文件，而更改主题也是在其中进行更改。</p><p>完成之后，别忘了我们的hexo三部曲：<strong>hexo clean，generate，service</strong>。<br><br>然后你就会看到，你的网站变成了这个样子：<br><img src="https://jantok-1302532854.cos.ap-shanghai.myqcloud.com/img/hexo/post/2020-07-05-03.png" alt="valantis主题下页面"><br>接下来就是进行一些基础的讲解与配置。</p></li></ol><h2 id="如何适配主题"><a href="#如何适配主题" class="headerlink" title="如何适配主题"></a>如何适配主题</h2><h3 id="配置文件"><a href="#配置文件" class="headerlink" title="配置文件"></a>配置文件</h3><p>  安装上面的步骤配置完，你的目录结构应该是下面这个样子：<br><br>  <img src="https://jantok-1302532854.cos.ap-shanghai.myqcloud.com/img/hexo/post/2020-07-05-04.png" alt="目录结构"><br>  上面提到_config.yml文件为我们的配置文件。这里出现了两个yml文件，一个在根目录下，一个在主题的根目录下。<br>  项目根目录下的yml为全局配置文件，而主题下的为主题配置文件。优先级上前者大于后者。<br>  一般对于样式的个性化，都可以主题配置文件中完成。<br></p><h3 id="主题目录结构"><a href="#主题目录结构" class="headerlink" title="主题目录结构"></a>主题目录结构</h3><p>  对于hexo的目录结构，上篇我们已经大致分析完了。我们现在来分析以下theme下主题的目录结构，而个性化你的主题样式，基本都是在这里进行实现。<br>  不同的主题间目录结构大体是相同的，了解后举一反三即可。<br></p><ul><li><p>.github文件夹是git仓库相关的文件夹，忽略。</p></li><li><p>languages文件夹是用来适配不同语言的实现国际化的，相关配置可以在主题配置文件下完成。再重申以下，<strong>所有的主题的相关配置，你基本都可以在主题配置文件下进行配置。</strong></p></li><li><p>layout （<strong>重点</strong>）这里一般是用来存放文件样式模板的，一般采用ejs格式。</p></li><li><p>scripts 这里用来存放相关事件触发的js以及一些组件按钮相关的逻辑。</p></li><li><p>source （<strong>非常重要</strong>）用来存放样式、字体等文件。需要进行修改源码进行主题个性化的同学，这里就是我们的主战场。</p><p>有几个知识点需要先理解一下：</p></li><li><p>hexo的理念就是一切皆为模板，根据模板自动生成所对应的html页面。所以layout文件夹就是他的结构模板所在。</p></li><li><p>一般情况下，主题都可以在主题配置文件（yml）中进行配置与修改，个别情况下需要修改layout或者source下的文件夹才能diy成自己想要的样式。</p></li><li><p>（<strong>重要</strong>）但是修改layout或者source会对主题源码进行破坏。对于下次主题升级时，如果有代码或者文件冲突，就会造成问题。</p></li><li><p>所以在优先级上，配置yml&gt;引入其他样式/js文件&gt;修改源码。</p><p>建议有一定基础的同学，将主题单独fork进自己github的仓库中，<br>然后再从自己的仓库中clone到项目中，那么在下次主题进行更行的适合，<br>只需要解决merge的问题即可，此为最优解决办法。</p></li></ul><h3 id="主题个性化"><a href="#主题个性化" class="headerlink" title="主题个性化"></a>主题个性化</h3><p>  终于进入了正题。本篇指在讲解一些最基础的适配，其他的依旧举一反三即可。<br></p><h4 id="yml配置文件的修改"><a href="#yml配置文件的修改" class="headerlink" title="yml配置文件的修改"></a>yml配置文件的修改</h4><p>  我们以最基础的为例子先。在进入安装完主题进去项目的时候，应该会发现，很多的导航链接打不开，或者是跳转到了题主的链接上。<br>  于是我们的第一件事，就是把其中的一些必须修改的配置修改了。<br>  <br><br>  打开主题的yml文件，我们会看到如下代码：<br>  <img src="https://jantok-1302532854.cos.ap-shanghai.myqcloud.com/img/hexo/post/2020-07-05-05.png" alt="代码"><br>  yml文件有非常明确的层级结构。所以里面的代码前面的空格的多少都代表着层级关系。<br>  如这里就是style（样式）下的一些配置，<br>  其中包括导航栏样式配置navbar、字体对齐方式text_align等。<br>  参照着<a href="https://volantis.js.org/v2/theme-settings/index.html?_sw-precache=915d53d0469df821097c0b3976c84c2d" target="_blank" rel="noopener">官网教程</a>来进行修改。<br></p><h4 id="进阶修改"><a href="#进阶修改" class="headerlink" title="进阶修改"></a>进阶修改</h4><p>  <strong>这一部分需要你有一定的前端代码基础。</strong></p><p>  大部分修改都是可以在yml中进行修改的，小部分个性化的样式，需要更改源码实现。<br>  比方说最开始的时候我想给首页的字体添加一个荧光环绕的shadow-box的效果，就只能从源码动手<br>  但是如果可以的话，最好不要修改源码，或者是从自己的仓库clone下来，<br>  这么做的好处除了防止根源性污染源码，同时也可以把自己的对于主题的魔改进行保存提交。<br>  <br><br>  而对于源码的修改，分为三种：</p><ol><li><p>结构性的修改。</p></li><li><p>样式性的修改。</p></li><li><p>全局添加式的修改。</p><p>对于结构性的修改，都在layout文件夹里面。<br>我们以修改封面为例子，比方说我们不想要首页的这个搜索栏，正确的做法我们应该是查看yml文件是否有的配置有修改，本文只是简单展示个例子。<br>我们找到了_cover文件夹下，找到index.ejs。看到代码如下：<br><img src="https://jantok-1302532854.cos.ap-shanghai.myqcloud.com/img/hexo/post/2020-07-05-06.png" alt="代码"><br>而根据代码，圈中的部分就是封面中搜索栏的所在的结点，把它去除、然后hexo clean,hexo g,hexo s三部曲，<br>你就会看到你的封面上已经去除掉搜索栏了。<br>其他的结构修改跟这里也是大同小异，你只需要找到结构所对应的ejs文件，添加新结点，删除结点，或者是更改结构顺序的等。</p><br><p>对于样式性css修改，又或者是js等修改，都在source文件夹下。<br>这里还是以封面为例子，我们找到了/source/css/_layout/cover.styl<br>代码如下：<br><img src="https://jantok-1302532854.cos.ap-shanghai.myqcloud.com/img/hexo/post/2020-07-05-07.png" alt="代码"><br>圈住的部分，我把它原来的字体颜色，改成了红色。刷新你的页面之后，你就会看他已经生效了：<br><img src="https://jantok-1302532854.cos.ap-shanghai.myqcloud.com/img/hexo/post/2020-07-05-08.png" alt="代码生效"><br>这里有些人可能会有点疑问，为什么这里不需要clean，g，s三部曲了呢？<br>因为hexo所生成的是一个<a href="">静态页面</a>,他根据你的结构所生成对应的html文件，而样式等在代码里是分离开的。<br>也就是说，如果你的改动是涉及到结点、结构、以及由hexo所生成的文件的改变，你需要重新三部曲一下。<br>如果你的改动是涉及到样式、js等之类的修改，你只需要刷新下即可。<br>但不管如何，如果你遇到了各种不生效的问题，三部曲一下，总是没错的。</p><br></li></ol><h4 id="更进阶修改"><a href="#更进阶修改" class="headerlink" title="更进阶修改"></a>更进阶修改</h4><p>  更进阶的修改，类似于全局js点击特效、live2d等的修改，<br>  我推荐官方也推荐的<a href="https://www.itrhx.com/2018/08/27/A04-Hexo-blog-topic-personalization/" target="_blank" rel="noopener">这篇文章</a><br>  这部分需要有一定的代码基础才能尝试下。<br>  同时我也推荐<a href="https://hexocn.cn/" target="_blank" rel="noopener">Hexo的中文站</a>（Hexo官方文档其实并不友善，难以阅读。而这个开源站还是很不错的。）<br>  里面有非常详细的从维护到建议以及”魔改教程”。<br>  <br></p><h2 id="尾声"><a href="#尾声" class="headerlink" title="尾声"></a>尾声</h2><p>  我们搭好了毛胚房，同时也精装修好了，剩下的家具购买，就看你自己的想象力和动手能力啦。<br>  无论如何，都希望可以学会举一反三，由浅入深，大胆尝试，独立解决问题，<br>  这对于工作还是生活，都是非常有帮助的。<br></p>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 博客 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hexo网站博客搭建与基础配置</title>
      <link href="/2020/07/04/Hexo%E7%BD%91%E7%AB%99%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA%E4%B8%8E%E5%9F%BA%E7%A1%80%E9%85%8D%E7%BD%AE/"/>
      <url>/2020/07/04/Hexo%E7%BD%91%E7%AB%99%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA%E4%B8%8E%E5%9F%BA%E7%A1%80%E9%85%8D%E7%BD%AE/</url>
      
        <content type="html"><![CDATA[<p>本篇会介绍如何使用<a href="https://hexo.io/zh-cn/" target="_blank" rel="noopener">Hexo</a>框架快速搭建一个博客网站。</p><!-- about --><p>学习本篇前，你必须具备以下知识储备：</p><ul><li>对于环境配置以及命令行等操作熟悉</li><li>对于Github有初步的认识和了解</li><li>有自己查阅文档的能力</li></ul><p>如果有以下知识储备，那就更好了：</p><ul><li>对前端项目有大致的了解</li><li>非常熟悉git命令行</li></ul><h2 id="什么是Hexo？为什么选择Hexo？"><a href="#什么是Hexo？为什么选择Hexo？" class="headerlink" title="什么是Hexo？为什么选择Hexo？"></a>什么是Hexo？为什么选择Hexo？</h2><p>  最初在笔者想搭建一个私人博客用于记录整理一些前端知识点的时候，在不了解当前博客技术的情况下，很自然而然的想到了需要非常多的技术栈才能完成<br></p><ul><li><p>一个<strong>好看的前端</strong>。</p></li><li><p>为了有一个好看的前端你可能还需要先绘画出<strong>前端原型图</strong>。</p></li><li><p>一个的后端，这个后端可能还需要有很强的<strong>健壮性</strong>。</p></li><li><p>一台<strong>云服务器</strong>，需要对服务器端有一定知识了解，甚至可能还需要对服务器的普通配置以及攻击防御等配置有一定的了解。</p></li><li><p>一个域名。</p></li><li><p>通过什么样的方式写一篇博客并且保存，每次都创建一个新页面？</p></li><li><p>。。。</p><p>在设想了这么多之后，会发现所需的技术栈以及要考虑的东西越来越多，甚至已经可以独立超脱出来成为一个产品了。<br><br>而我们最初的想法，仅仅只是想搭建一个博客，用于完成一些普遍的需求而已。<br><br>但按照上面的设想，这对于搭建人员的技术要求是否太高了，甚至对于一些非技术人员，但又想搭建一个自己博客的人来说，真的就是遥不可及了么<br></p><p>那么，在如今各种插件包与框架百花齐放的时代，有没有什么既可以<strong>快速搭建一个五脏六腑俱全的博客</strong>，又可以<strong>自定义属于自己的、好看的前端样式</strong>，如果可以甚至<strong>对代码能力需求较弱</strong>的博客框架出现呢？<br><br>有，而且主流的博客非常的多，如Wordpress等。<br><br>那为什么选择<a href="https://hexo.io/zh-cn/" target="_blank" rel="noopener">Hexo</a>框架呢？因为它真的很简单。<br></p><p>对于Hexo是什么，可以进去官网查看文档，了解以下。对于技术人员来说，会自行查看文档解决，自我解决问题是一个必备的能力。<br><br>而如果并没有兴趣进行文档查阅，你只需要知道以下几点即可：</p></li><li><p>Hexo可以把你用<a href="https://www.jianshu.com/p/9eee76a2023d" target="_blank" rel="noopener">markdown</a>所写成的文章，自动生成对应的html<strong>静态页面</strong>。</p></li><li><p>截止到目前2020/07/04，官网上已经拥有超过311种主题。</p></li><li><p>高度定制化，你可以自定义文章的样式、主题的样式。如果有一定代码能力，你甚至可以去修改主题源码。</p></li><li><p><strong>不需要后端</strong>，这一点非常重要。</p></li><li><p>你甚至可以<strong>不需要云服务器</strong>，连<strong>域名</strong>都不需要，0成本直接挂载到github上，并且拥有自己的域名。但通过github挂载的方式，您的网站不能够被收录与百度或者是google中，也就是不可被搜索到。</p></li></ul><h2 id="项目安装配置"><a href="#项目安装配置" class="headerlink" title="项目安装配置"></a>项目安装配置</h2><p>  若以下相关配置您的环境已经配置了，可自行跳过。</p><h3 id="命令行工具"><a href="#命令行工具" class="headerlink" title="命令行工具"></a>命令行工具</h3><p>  linux与mac下自带的命令行环境已经足够便捷于开发，笔者使用的是mac环境。对于windows推荐，推荐安装Git Bash命令行工具<br><br>  非常不推荐使用<strong>黑窗窗</strong>（也就是cmd）进行开发于运行。对于Git Bash的安装，推荐<a href="https://blog.csdn.net/weixin_41714277/article/details/79399270" target="_blank" rel="noopener">这个教程</a>。<br><br>  配置完成之后，输入以下命令行：<br>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git version</span><br></pre></td></tr></table></figure><br>  看到有输出为：</p><blockquote><p>git version x (y)</p></blockquote><p>  则表示配置完成。x表示版本号，y为其他附加信息。</p><h3 id="NodeJs"><a href="#NodeJs" class="headerlink" title="NodeJs"></a>NodeJs</h3><p>  Hexo基于nodeJs环境所进行开发。<br><br>  <a href="https://www.cnblogs.com/isme-zjh/p/12729571.html" target="_blank" rel="noopener">windows安装教程</a><br><br>  输入以下命令，有版本号输出即安装完成：<br>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">node -v</span><br><span class="line">npm -v</span><br></pre></td></tr></table></figure></p><h2 id="安装Hexo"><a href="#安装Hexo" class="headerlink" title="安装Hexo"></a>安装Hexo</h2><ul><li><p>新建一个文件夹，用来存放博客的文件。</p></li><li><p>在命令行下进入到该文件夹页面。使用cd命令，或者windows用户可以在点击进入该文件夹的情况下，右键，然后点击 <strong>git base here</strong>表示在该文件夹路径下大概git命令行。</p></li><li><p>使用hexo命令进行安装：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i -g hexo</span><br></pre></td></tr></table></figure><p>等待命令跑完，且正常后，输入以下命令：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo init</span><br></pre></td></tr></table></figure><p>表示用hexo初始化创建该文件夹。之后该文件夹下会生成如下文件：<br></p></li><li><p>node_modules：用来存放安装的依赖包，一般不需要管理。</p></li><li><p>public：存放hexo自动生成的页面文件。</p></li><li><p>scaffolds：用于生成文章的格式模板。</p></li><li><p>source：用于存放各种生成的文章（在该文件夹下使用markdown语法编写md文件后，hexo会<strong>自动生成对应的web页面</strong>）</p></li><li><p>themes：用于存放主题文件夹。</p></li><li><p>_config.yml: （<strong>重要</strong>）在此对整个hexo项目进行配置。</p></li><li><p>db.json: source文件夹的解析文件，一般不需要管理。</p></li><li><p>package.json：项目所需的配置信息管理，一般不需要管理。</p><h2 id="运行hexo"><a href="#运行hexo" class="headerlink" title="运行hexo"></a>运行hexo</h2><p>首选，输入以下命令，对整个hexo项目进行清理。<br><br>（每次改动后在运行之前，都需要进行清理，必须要养成这样习惯）</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo clean</span><br></pre></td></tr></table></figure><p>然后，生成网页文件。其中g是<strong>generate</strong>的简写。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo g</span><br></pre></td></tr></table></figure><p>然后，运行hexo项目。s是<strong>service</strong>的简写。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo s</span><br></pre></td></tr></table></figure><p>接着你就会看到如下提示，则表示运行成功：</p><blockquote><p>INFO  Start processing<br>INFO  Hexo is running at <a href="http://localhost:4000" target="_blank" rel="noopener">http://localhost:4000</a> . Press Ctrl+C to stop.</p></blockquote><p>若看到如下页面:</p><blockquote><p>FATAL Port 4000 has been used. Try other port instead.<br>FATAL Something’s wrong. Maybe you can find the solution here: <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">https://hexo.io/docs/troubleshooting.html</a></p></blockquote><p>则表示项目<strong>端口已被占用</strong>。项目默认运行端口为4000，可以在配置文件中进行修改。<br><br>若项目运行正常，则在游览器中复制打开显示的localhost网址，你就会看到如下页面：<br><br><img src="https://jantok-1302532854.cos.ap-shanghai.myqcloud.com/img/hexo/post/2020-07-04-01.png" alt="项目正常"><br>则表示运行成功。其中你所看到的是hexo的默认主题，后续可进行更改。<br><br>这步操作中所用到的三条命令行<strong>clean，g，s</strong>是hexo的三部曲，要熟记，后面还有<strong>d-deploy</strong>表示发布。</p><br>至此，则hexo的基础搭建完成。</li></ul>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 博客 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
