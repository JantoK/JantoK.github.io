{"meta":{"title":"JantoK's blog","subtitle":"个人记录博客","description":"simple is the best.","author":"JantoK","url":"http://129.211.78.206","root":"/"},"pages":[{"title":"分类","date":"2020-06-30T09:10:00.000Z","updated":"2020-07-02T05:37:46.962Z","comments":true,"path":"categories/index.html","permalink":"http://129.211.78.206/categories/","excerpt":"","text":""},{"title":"个人简介","date":"2020-07-05T07:15:36.998Z","updated":"2020-07-05T07:15:36.998Z","comments":false,"path":"about/index.html","permalink":"http://129.211.78.206/about/","excerpt":"","text":"这里是哪里？这里是JantoK个人用于记录工作学习中遇到的一些知识点的地方。以前端为主，可能因为工作原因会涉及到一点后端。而且可能还会有什么奇奇怪怪的东西乱入。（毕竟站主的想法就是奇奇怪怪的） JantoK是谁？JantoK是一个刚毕业的前端狗，是在深圳底层被毒打的吃不饱饭的社畜（笑。耳机不离身，全球移动人肉曲库，宅，最典型金牛男，tvb”考古专家”。最近玩的游戏只剩下风暴英雄了。 怎么联系？有任何问题欢迎您在本站留言，或者是从下方的github上找我。也可以跟我说下想看大概哪方面的知识分享。万分感谢🙏。"},{"title":"所有标签","date":"2020-06-30T09:11:40.000Z","updated":"2020-07-03T12:23:55.640Z","comments":true,"path":"tags/index.html","permalink":"http://129.211.78.206/tags/","excerpt":"","text":""}],"posts":[{"title":"如何将现有Vue项目迁移到Nuxt框架下","slug":"如何将现有Vue项目迁移到Nuxt框架下","date":"2020-07-06T06:31:39.000Z","updated":"2020-07-06T11:48:04.155Z","comments":true,"path":"2020/07/06/如何将现有Vue项目迁移到Nuxt框架下/","link":"","permalink":"http://129.211.78.206/2020/07/06/%E5%A6%82%E4%BD%95%E5%B0%86%E7%8E%B0%E6%9C%89Vue%E9%A1%B9%E7%9B%AE%E8%BF%81%E7%A7%BB%E5%88%B0Nuxt%E6%A1%86%E6%9E%B6%E4%B8%8B/","excerpt":"本篇会介绍如何将现有Vue项目，迁移到Nuxt框架下。 公司前阵子为了给现有项目做seo，同时对缓存以及pwa、添加一些服务端功能等功能需求进行一定的优化和管理，于是决定将一个现有的纯vue项目，迁移到nuxt框架下。本篇重点写的是是在当时做迁移的时候记录的一些坑，而具体的一些步骤其实网上都有很详细的描述，我就不再做论述。","text":"本篇会介绍如何将现有Vue项目，迁移到Nuxt框架下。 公司前阵子为了给现有项目做seo，同时对缓存以及pwa、添加一些服务端功能等功能需求进行一定的优化和管理，于是决定将一个现有的纯vue项目，迁移到nuxt框架下。本篇重点写的是是在当时做迁移的时候记录的一些坑，而具体的一些步骤其实网上都有很详细的描述，我就不再做论述。 学习本篇前，你必须具备以下知识储备： 熟悉Vue项目。 对Nuxt项目有一定的初步了解。 有自己查阅文档的能力。 对于项目的基础迁移步骤，可以参考这篇文章，里面都有非常详细的记载，但也是仅供参考，因为不同的项目也是有一定的区别。 翻阅了一下之前在做迁移的时候所记录的文档，总结下几个大坑，如果里面有你所遇到的，希望能帮到你。 如何将vue-router适配到nuxt的路由管理中？ 如何适配并封装axios？ 如何将vue.config.js适配到nuxt.config.js中？ 全局型plugins该如何引入？ 你必须先知道的一些坑在迁移的时候，有遇到一些大坑，翻阅文档，结合stackoverflow才摸透。因为国内环境中使用nuxt的人并不多，生态还不是很完善，所以踩到一些坑的时候并不是能很快排查解决。 这里先提出几个你必须要知道的几个坑，后面的文章里也是默认你已经熟知这几点。（其实我感觉整篇文章最精华的就是这里了） 什么是nuxt对于nuxt，官方是这么介绍的： Nuxt.js 是一个基于 Vue.js 的通用应用框架。 他集成了vue，vue-router，vuex等等一些较为基础和重要的组件/框架。 （也是因为集成的原因，所以无法从cdn引入vue，因为框架内已集成，再从cdn引入会重复打包，目前还没有找到相关解决办法） spa与ssr关于什么是spa与ssr，网上的资料已经非常全面了。这里说一下会踩到的坑。在ssr模式下，nuxt会先进行服务端的解析，再进行客户端的解析。于是乎在运行的时候，就会触发一些变量、组件等undefined的情况。 这里以最典型的window对象为例，在项目中如果要使用window对象，并且还是在客户端解析前（如created生命周期内），就会触发undefind的问题。 解决办法是，更换为在服务端解析后的生命周期（如mouted生命周期）内执行，或者是加入以下代码进行判断： 123if (process.browser) &#123; ........ &#125; 在迁移的过程中你会遇到非常非常多次这个问题，而解决办法就是如此的简单，仅需一行代码。 万物都是plugins在nuxt下，许许多多的组件以及配置，都是通过plugins的形式完成配置。这里也会涉及到axios、localstorage等的封装。 而在plugins进行引入的时候，也要注意下是否开启ssr。 将vue-router迁移到nuxt的路由管理中在nuxt与vue中，有一个最为明显的区别就是nuxt采用的是根据pages页面的路径自动生成所对应的路由。所以在项目的迁移中，这里也是花费时间最多的模块。 迁移方案有两种： 沿用旧的vue-router结构，使用官方提供的的@nuxtjs/router插件，以读取沿用旧的router.js文件配置。同时修改srcDir路径（这个配置在文章开头推荐文章中已经有很详细的记录了）。 一点一点pages文件中，进行适配。 未完待续。","categories":[{"name":"前端","slug":"前端","permalink":"http://129.211.78.206/categories/%E5%89%8D%E7%AB%AF/"}],"tags":[{"name":"nuxt","slug":"nuxt","permalink":"http://129.211.78.206/tags/nuxt/"},{"name":"vue","slug":"vue","permalink":"http://129.211.78.206/tags/vue/"}]},{"title":"手把手教你Hexo网站添加主题及个性化配置","slug":"Hexo网站添加主题及个性化配置","date":"2020-07-05T02:01:35.000Z","updated":"2020-07-05T07:04:48.279Z","comments":true,"path":"2020/07/05/Hexo网站添加主题及个性化配置/","link":"","permalink":"http://129.211.78.206/2020/07/05/Hexo%E7%BD%91%E7%AB%99%E6%B7%BB%E5%8A%A0%E4%B8%BB%E9%A2%98%E5%8F%8A%E4%B8%AA%E6%80%A7%E5%8C%96%E9%85%8D%E7%BD%AE/","excerpt":"","text":"本篇会介绍如何使用Hexo主题，并且进行个性化配置。 学习本篇前，你必须具备以下知识储备： 已经安装且运行了Hexo。 对前端知识有初步的基础认识。 有自己查阅文档的能力。 如果有以下知识储备，那就更好了： 能编写css样式。 怎么使用Hexo主题 在 上篇教程 中我们的Hexo博客已经可以跑起来了。但是默认的主题实在是很丑一点都不狂拽酷炫。 而我们搭建一个属于自己的狂拽酷炫的博客的博客的第一步，就是先在Hexo官网上挑选一个最接近适合我们博客的主题。 挑选到自己喜欢的主题后，接下来就是考验你眼力的适合了。因为我们要在展示的示例网站中，找到这个主题的项目名字、或者是地址。 作者放出来的该主题的示例网站，他可能是一个作者正在使用的个人站、也有可能是一个展示站（即样式展示而已）。也有可能是很规范的示例网站（即包含示例、教程、文档，同时单独挂载出来）。 这里我们以本站所使用的volantis主题为例子。进去之后就是非常完整的主题默认样式展示，同时是有版本更新内容以及文档教程等。 我们在主题网站的教程页面里，找到了如下安装命令： 我们一步一步来解释以下这几步命令的含义，同时对于其他主题的安装也是大同小异，举一反三即可。 Hexo中所有的主题都是下载到themes文件夹下进行统一管理。 而下载的git命令如上图所示，首先你要在命令行状态下进入到你的博客文件夹，然后使用下载命令进行主题下载。 而其他地址也一样，你所需要做的就是找到你想要的主题的地址，然后clone到themes下。 博客根目录下的_config.yml是整个博客项目的配置文件，而更改主题也是在其中进行更改。 完成之后，别忘了我们的hexo三部曲：hexo clean，generate，service。然后你就会看到，你的网站变成了这个样子：接下来就是进行一些基础的讲解与配置。 如何适配主题配置文件 安装上面的步骤配置完，你的目录结构应该是下面这个样子： 上面提到_config.yml文件为我们的配置文件。这里出现了两个yml文件，一个在根目录下，一个在主题的根目录下。 项目根目录下的yml为全局配置文件，而主题下的为主题配置文件。优先级上前者大于后者。 一般对于样式的个性化，都可以主题配置文件中完成。 主题目录结构 对于hexo的目录结构，上篇我们已经大致分析完了。我们现在来分析以下theme下主题的目录结构，而个性化你的主题样式，基本都是在这里进行实现。 不同的主题间目录结构大体是相同的，了解后举一反三即可。 .github文件夹是git仓库相关的文件夹，忽略。 languages文件夹是用来适配不同语言的实现国际化的，相关配置可以在主题配置文件下完成。再重申以下，所有的主题的相关配置，你基本都可以在主题配置文件下进行配置。 layout （重点）这里一般是用来存放文件样式模板的，一般采用ejs格式。 scripts 这里用来存放相关事件触发的js以及一些组件按钮相关的逻辑。 source （非常重要）用来存放样式、字体等文件。需要进行修改源码进行主题个性化的同学，这里就是我们的主战场。 有几个知识点需要先理解一下： hexo的理念就是一切皆为模板，根据模板自动生成所对应的html页面。所以layout文件夹就是他的结构模板所在。 一般情况下，主题都可以在主题配置文件（yml）中进行配置与修改，个别情况下需要修改layout或者source下的文件夹才能diy成自己想要的样式。 （重要）但是修改layout或者source会对主题源码进行破坏。对于下次主题升级时，如果有代码或者文件冲突，就会造成问题。 所以在优先级上，配置yml&gt;引入其他样式/js文件&gt;修改源码。 建议有一定基础的同学，将主题单独fork进自己github的仓库中，然后再从自己的仓库中clone到项目中，那么在下次主题进行更行的适合，只需要解决merge的问题即可，此为最优解决办法。 主题个性化 终于进入了正题。本篇指在讲解一些最基础的适配，其他的依旧举一反三即可。 yml配置文件的修改 我们以最基础的为例子先。在进入安装完主题进去项目的时候，应该会发现，很多的导航链接打不开，或者是跳转到了题主的链接上。 于是我们的第一件事，就是把其中的一些必须修改的配置修改了。 打开主题的yml文件，我们会看到如下代码： yml文件有非常明确的层级结构。所以里面的代码前面的空格的多少都代表着层级关系。 如这里就是style（样式）下的一些配置， 其中包括导航栏样式配置navbar、字体对齐方式text_align等。 参照着官网教程来进行修改。 进阶修改 这一部分需要你有一定的前端代码基础。 大部分修改都是可以在yml中进行修改的，小部分个性化的样式，需要更改源码实现。 比方说最开始的时候我想给首页的字体添加一个荧光环绕的shadow-box的效果，就只能从源码动手 但是如果可以的话，最好不要修改源码，或者是从自己的仓库clone下来， 这么做的好处除了防止根源性污染源码，同时也可以把自己的对于主题的魔改进行保存提交。 而对于源码的修改，分为三种： 结构性的修改。 样式性的修改。 全局添加式的修改。 对于结构性的修改，都在layout文件夹里面。我们以修改封面为例子，比方说我们不想要首页的这个搜索栏，正确的做法我们应该是查看yml文件是否有的配置有修改，本文只是简单展示个例子。我们找到了_cover文件夹下，找到index.ejs。看到代码如下：而根据代码，圈中的部分就是封面中搜索栏的所在的结点，把它去除、然后hexo clean,hexo g,hexo s三部曲，你就会看到你的封面上已经去除掉搜索栏了。其他的结构修改跟这里也是大同小异，你只需要找到结构所对应的ejs文件，添加新结点，删除结点，或者是更改结构顺序的等。 对于样式性css修改，又或者是js等修改，都在source文件夹下。这里还是以封面为例子，我们找到了/source/css/_layout/cover.styl代码如下：圈住的部分，我把它原来的字体颜色，改成了红色。刷新你的页面之后，你就会看他已经生效了：这里有些人可能会有点疑问，为什么这里不需要clean，g，s三部曲了呢？因为hexo所生成的是一个静态页面,他根据你的结构所生成对应的html文件，而样式等在代码里是分离开的。也就是说，如果你的改动是涉及到结点、结构、以及由hexo所生成的文件的改变，你需要重新三部曲一下。如果你的改动是涉及到样式、js等之类的修改，你只需要刷新下即可。但不管如何，如果你遇到了各种不生效的问题，三部曲一下，总是没错的。 更进阶修改 更进阶的修改，类似于全局js点击特效、live2d等的修改， 我推荐官方也推荐的这篇文章 这部分需要有一定的代码基础才能尝试下。 同时我也推荐Hexo的中文站（Hexo官方文档其实并不友善，难以阅读。而这个开源站还是很不错的。） 里面有非常详细的从维护到建议以及”魔改教程”。 尾声 我们搭好了毛胚房，同时也精装修好了，剩下的家具购买，就看你自己的想象力和动手能力啦。 无论如何，都希望可以学会举一反三，由浅入深，大胆尝试，独立解决问题， 这对于工作还是生活，都是非常有帮助的。","categories":[{"name":"前端","slug":"前端","permalink":"http://129.211.78.206/categories/%E5%89%8D%E7%AB%AF/"}],"tags":[{"name":"博客","slug":"博客","permalink":"http://129.211.78.206/tags/%E5%8D%9A%E5%AE%A2/"}]},{"title":"Hexo网站博客搭建与基础配置","slug":"Hexo网站博客搭建与基础配置","date":"2020-07-04T09:46:26.000Z","updated":"2020-07-05T02:31:55.835Z","comments":true,"path":"2020/07/04/Hexo网站博客搭建与基础配置/","link":"","permalink":"http://129.211.78.206/2020/07/04/Hexo%E7%BD%91%E7%AB%99%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA%E4%B8%8E%E5%9F%BA%E7%A1%80%E9%85%8D%E7%BD%AE/","excerpt":"","text":"本篇会介绍如何使用Hexo框架快速搭建一个博客网站。 学习本篇前，你必须具备以下知识储备： 对于环境配置以及命令行等操作熟悉 对于Github有初步的认识和了解 有自己查阅文档的能力 如果有以下知识储备，那就更好了： 对前端项目有大致的了解 非常熟悉git命令行 什么是Hexo？为什么选择Hexo？ 最初在笔者想搭建一个私人博客用于记录整理一些前端知识点的时候，在不了解当前博客技术的情况下，很自然而然的想到了需要非常多的技术栈才能完成 一个好看的前端。 为了有一个好看的前端你可能还需要先绘画出前端原型图。 一个的后端，这个后端可能还需要有很强的健壮性。 一台云服务器，需要对服务器端有一定知识了解，甚至可能还需要对服务器的普通配置以及攻击防御等配置有一定的了解。 一个域名。 通过什么样的方式写一篇博客并且保存，每次都创建一个新页面？ 。。。 在设想了这么多之后，会发现所需的技术栈以及要考虑的东西越来越多，甚至已经可以独立超脱出来成为一个产品了。而我们最初的想法，仅仅只是想搭建一个博客，用于完成一些普遍的需求而已。但按照上面的设想，这对于搭建人员的技术要求是否太高了，甚至对于一些非技术人员，但又想搭建一个自己博客的人来说，真的就是遥不可及了么 那么，在如今各种插件包与框架百花齐放的时代，有没有什么既可以快速搭建一个五脏六腑俱全的博客，又可以自定义属于自己的、好看的前端样式，如果可以甚至对代码能力需求较弱的博客框架出现呢？有，而且主流的博客非常的多，如Wordpress等。那为什么选择Hexo框架呢？因为它真的很简单。 对于Hexo是什么，可以进去官网查看文档，了解以下。对于技术人员来说，会自行查看文档解决，自我解决问题是一个必备的能力。而如果并没有兴趣进行文档查阅，你只需要知道以下几点即可： Hexo可以把你用markdown所写成的文章，自动生成对应的html静态页面。 截止到目前2020/07/04，官网上已经拥有超过311种主题。 高度定制化，你可以自定义文章的样式、主题的样式。如果有一定代码能力，你甚至可以去修改主题源码。 不需要后端，这一点非常重要。 你甚至可以不需要云服务器，连域名都不需要，0成本直接挂载到github上，并且拥有自己的域名。但通过github挂载的方式，您的网站不能够被收录与百度或者是google中，也就是不可被搜索到。 项目安装配置 若以下相关配置您的环境已经配置了，可自行跳过。 命令行工具 linux与mac下自带的命令行环境已经足够便捷于开发，笔者使用的是mac环境。对于windows推荐，推荐安装Git Bash命令行工具 非常不推荐使用黑窗窗（也就是cmd）进行开发于运行。对于Git Bash的安装，推荐这个教程。 配置完成之后，输入以下命令行： 1git version 看到有输出为： git version x (y) 则表示配置完成。x表示版本号，y为其他附加信息。 NodeJs Hexo基于nodeJs环境所进行开发。 windows安装教程 输入以下命令，有版本号输出即安装完成： 12node -vnpm -v 安装Hexo 新建一个文件夹，用来存放博客的文件。 在命令行下进入到该文件夹页面。使用cd命令，或者windows用户可以在点击进入该文件夹的情况下，右键，然后点击 git base here表示在该文件夹路径下大概git命令行。 使用hexo命令进行安装： 1npm i -g hexo 等待命令跑完，且正常后，输入以下命令： 1hexo init 表示用hexo初始化创建该文件夹。之后该文件夹下会生成如下文件： node_modules：用来存放安装的依赖包，一般不需要管理。 public：存放hexo自动生成的页面文件。 scaffolds：用于生成文章的格式模板。 source：用于存放各种生成的文章（在该文件夹下使用markdown语法编写md文件后，hexo会自动生成对应的web页面） themes：用于存放主题文件夹。 _config.yml: （重要）在此对整个hexo项目进行配置。 db.json: source文件夹的解析文件，一般不需要管理。 package.json：项目所需的配置信息管理，一般不需要管理。 运行hexo首选，输入以下命令，对整个hexo项目进行清理。（每次改动后在运行之前，都需要进行清理，必须要养成这样习惯） 1hexo clean 然后，生成网页文件。其中g是generate的简写。 1hexo g 然后，运行hexo项目。s是service的简写。 1hexo s 接着你就会看到如下提示，则表示运行成功： INFO Start processingINFO Hexo is running at http://localhost:4000 . Press Ctrl+C to stop. 若看到如下页面: FATAL Port 4000 has been used. Try other port instead.FATAL Something’s wrong. Maybe you can find the solution here: https://hexo.io/docs/troubleshooting.html 则表示项目端口已被占用。项目默认运行端口为4000，可以在配置文件中进行修改。若项目运行正常，则在游览器中复制打开显示的localhost网址，你就会看到如下页面：则表示运行成功。其中你所看到的是hexo的默认主题，后续可进行更改。这步操作中所用到的三条命令行clean，g，s是hexo的三部曲，要熟记，后面还有d-deploy表示发布。 至此，则hexo的基础搭建完成。","categories":[{"name":"前端","slug":"前端","permalink":"http://129.211.78.206/categories/%E5%89%8D%E7%AB%AF/"}],"tags":[{"name":"博客","slug":"博客","permalink":"http://129.211.78.206/tags/%E5%8D%9A%E5%AE%A2/"}]}],"categories":[{"name":"前端","slug":"前端","permalink":"http://129.211.78.206/categories/%E5%89%8D%E7%AB%AF/"}],"tags":[{"name":"nuxt","slug":"nuxt","permalink":"http://129.211.78.206/tags/nuxt/"},{"name":"vue","slug":"vue","permalink":"http://129.211.78.206/tags/vue/"},{"name":"博客","slug":"博客","permalink":"http://129.211.78.206/tags/%E5%8D%9A%E5%AE%A2/"}]}